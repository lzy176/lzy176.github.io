{"version":3,"sources":["webpack:///./node_modules/matter-js/build/matter.js","webpack:///src/pages/Matter/index.vue","webpack:///./src/pages/Matter/Basic.js","webpack:///./src/pages/Matter/Static.js","webpack:///./src/pages/Matter/Events.js","webpack:///./src/pages/Matter/index.vue?e899","webpack:///./src/pages/Matter/index.vue"],"names":["global","factory","modules","installedModules","__webpack_require__","moduleId","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Common","_nextId","_seed","_nowStartTime","Date","_warnedOnce","_decomp","extend","obj","deep","argsStart","deepClone","arguments","length","source","prop","constructor","clone","keys","push","values","path","begin","end","split","slice","set","val","parts","shuffle","array","j","Math","floor","random","temp","choose","choices","isElement","HTMLElement","nodeType","nodeName","isArray","toString","isFunction","isPlainObject","isString","clamp","min","max","sign","now","window","performance","webkitNow","_seededRandom","colorToNumber","colorString","replace","charAt","parseInt","logLevel","log","console","apply","concat","Array","info","warn","warnOnce","message","join","deprecated","warning","chain","nextId","indexOf","haystack","needle","map","list","func","mapped","topologicalSort","graph","result","visited","node","_topologicalSort","neighbors","neighbor","funcs","_chained","lastResult","args","chainPathBefore","base","chainPathAfter","setDecomp","decomp","getDecomp","e","Bounds","vertices","bounds","x","y","update","velocity","Infinity","vertex","contains","point","overlaps","boundsA","boundsB","translate","vector","shift","position","deltaX","deltaY","Vector","magnitude","sqrt","magnitudeSquared","rotate","angle","output","cos","sin","rotateAbout","normalise","dot","vectorA","vectorB","cross","cross3","vectorC","add","sub","mult","scalar","div","perp","negate","neg","atan2","_temp","Vertices","points","body","index","isInternal","fromPath","match","parseFloat","centre","area","mean","average","signed","abs","inertia","mass","numerator","denominator","v","verticesLength","translateX","translateY","dx","dy","pointX","pointY","nextVertex","scale","scaleX","scaleY","delta","chamfer","radius","quality","qualityMin","qualityMax","newVertices","prevVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","pow","radiusVector","midNormal","scaledVertex","precision","theta","acos","clockwiseSort","sort","vertexA","vertexB","isConvex","k","z","flag","hull","upper","lower","pop","Events","on","eventNames","callback","names","events","off","callbacks","newCallbacks","trigger","event","eventClone","Composite","Body","options","id","type","parent","isModified","bodies","constraints","composites","label","plugin","cache","allBodies","allConstraints","allComposites","setModified","composite","updateParents","updateChildren","childComposite","objects","addBody","addConstraint","addComposite","constraint","remove","removeBody","removeConstraint","removeComposite","compositeA","compositeB","removeCompositeAt","splice","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","isStatic","move","rebase","translation","recursive","rotation","setPosition","Sleeping","Axes","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","defaults","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","angularVelocity","isSensor","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","render","visible","opacity","strokeStyle","fillStyle","lineWidth","sprite","xScale","yScale","xOffset","yOffset","circleRadius","positionPrev","anglePrev","axes","_original","_initProperties","nextGroup","isNonColliding","nextCategory","defaultFillStyle","defaultStrokeStyle","defaultLineWidth","settings","setStatic","setMass","setDensity","setInertia","setVertices","setAngle","setVelocity","setAngularVelocity","setParts","setCentre","part","inverseMass","inverseInertia","moment","fromVertices","autoHull","hullCentre","total","_totalProperties","relative","totalArea","totalInertia","deltaTime","correction","deltaTimeSquared","velocityPrevX","velocityPrevY","applyForce","offset","properties","_motionWakeThreshold","_motionSleepThreshold","_minBias","timeFactor","minMotion","maxMotion","sleepCounter","afterCollisions","pairs","pair","isActive","collision","bodyA","bodyB","sleepingBody","movingBody","wasSleeping","Collision","_supports","_overlapAB","_overlapBA","Pair","overlap","axis","collided","parentA","parentB","depth","normal","tangent","penetration","supports","collides","_overlapAxes","minOverlap","table","minAxis","minAxisX","minAxisY","supportsB","_findSupports","supportCount","supportsA","verticesA","verticesB","overlapAB","overlapBA","verticesALength","verticesBLength","verticesAX","verticesAY","verticesBX","verticesBY","axesLength","overlapMin","Number","MAX_VALUE","overlapAxisNumber","axisX","axisY","minA","minB","maxA","maxB","_projectToAxis","projection","direction","vertexC","distance","bodyAPositionX","bodyAPositionY","normalX","normalY","nearestDistance","Contact","timestamp","contacts","activeContacts","separation","confirmedActive","timeCreated","timeUpdated","parentAVerticesLength","support","contactId","contact","setActive","Constraint","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","stiffness","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","impulse","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","share","normalVelocity","relativeVelocity","difference","massTotal","resistanceTotal","zero","postSolveAll","gradient","toFixed","xx","Bodies","rectangle","width","height","trapezoid","slope","verticesPath","x1","x2","x3","circle","maxSides","sides","ceil","polygon","PI","yy","vertexSets","flagInternal","removeCollinear","minimumArea","removeDuplicatePoints","canDecomp","Boolean","quickDecomp","concave","makeCCW","removeCollinearPoints","decomposed","chunkVertices","partA","partB","pav","pbv","da","db","Mouse","element","mouse","document","absolute","mousedownPosition","mouseupPosition","wheelDelta","button","pixelRatio","getAttribute","sourceEvents","mousemove","mousedown","mouseup","mousewheel","_getRelativeMousePosition","changedTouches","preventDefault","detail","setElement","addEventListener","clearSourceEvents","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","undefined","pageXOffset","scrollLeft","scrollY","pageYOffset","scrollTop","touches","pageX","left","pageY","top","clientWidth","clientHeight","Detector","setBodies","detector","collisions","bodiesLength","canCollide","_compareBoundsX","boundXMax","boundYMax","boundYMin","bodyAStatic","partsALength","partsASingle","partsBLength","partsBStart","filterA","filterB","Plugin","_registry","register","isPlugin","registered","pluginVersion","versionParse","version","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","used","isFor","parsed","for","versionSatisfies","use","plugins","uses","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","test","pattern","exec","major","minor","patch","isRange","operator","prerelease","Render","_requestAnimationFrame","_cancelAnimationFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","setTimeout","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","_goodFps","_goodDelta","controller","engine","canvas","frameRequestId","timing","historySize","deltaHistory","lastTime","lastTimestamp","lastElapsed","timestampElapsed","timestampElapsedHistory","engineDeltaHistory","engineElapsedHistory","elapsedHistory","background","wireframeBackground","hasBounds","enabled","wireframes","showSleeping","showDebug","showStats","showPerformance","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","getContext","textures","showBroadphase","setPixelRatio","appendChild","run","loop","time","_updateTiming","world","stats","stop","_getPixelRatio","setAttribute","style","lookAt","padding","center","viewHeight","outerRatio","innerRatio","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","setTransform","endViewTransform","startTime","currentBackground","_applyBackground","globalCompositeOperation","fillRect","enableSleeping","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyVelocity","bodyIds","separations","vertexNumbers","mousePosition","sections","Part","Cons","Comp","font","textBaseline","textAlign","section","fillText","lastEngineDelta","lastDelta","deltaMean","_mean","elapsedMean","engineDeltaMean","engineElapsedMean","rateMean","fps","gap","round","count","indicator","plotY","beginPath","moveTo","lineTo","stroke","start","arc","closePath","coils","fill","globalAlpha","texture","_getTexture","drawImage","rect","normalPosX","normalPosY","inspector","selected","item","data","setLineDash","selectStart","selectBounds","unshift","createElement","oncontextmenu","onselectstart","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","normalImpulse","tangentImpulse","Engine","Resolver","Pairs","positionIterations","velocityIterations","constraintIterations","gravity","grid","buckets","broadphase","metrics","_bodiesApplyGravity","_bodiesUpdate","collisionStart","preSolvePosition","solvePosition","postSolvePosition","preSolveVelocity","solveVelocity","collisionActive","collisionEnd","_bodiesClearForces","merge","engineA","engineB","gravityScale","worldBounds","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","activeCount","pairsLength","contactShare","positionDampen","positionWarming","verticesTranslate","boundsUpdate","positionImpulseX","positionImpulseY","contactsLength","contactVertex","impulseX","impulseY","maxFriction","timeScaleSquared","restingThresh","frictionNormalMultiplier","restingThreshTangent","NumberMaxValue","bodyAVelocity","bodyBVelocity","tangentX","tangentY","inverseMassTotal","offsetAX","offsetAY","offsetBX","offsetBY","velocityPointAX","velocityPointAY","relativeVelocityX","relativeVelocityY","tangentVelocity","normalOverlap","normalForce","frictionLimit","oAcN","oBcN","contactNormalImpulse","contactTangentImpulse","pairIndex","pairsList","pairsListLength","pairsTable","collisionsLength","removePairIndex","Matter","Composites","Grid","MouseConstraint","Query","Runner","SAT","Svg","World","before","after","stack","columns","rows","columnGap","rowGap","lastBody","row","maxHeight","column","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","mesh","crossBrace","col","bodyC","pyramid","actualRows","lastBodyWidth","newtonsCradle","size","car","wheelSize","wheelAOffset","wheelBOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","bucketWidth","bucketHeight","forceUpdate","bucket","bucketId","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","gridPairs","pairId","bucketLength","pairKeys","pairKeysLength","mouseConstraint","_triggerEvents","mouseEvents","partsAStart","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","outside","_frameTimeout","clearTimeout","runner","deltaSampleSize","counterTimestamp","frameCounter","timePrev","timeScalePrev","isFixed","deltaMin","deltaMax","tick","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","lx","ly","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag","moveCircle","config","circleTargetArr","level","methods","[object Object]","this","color","reduce","a","b","custom","dataTemp","matter","Basic","getElementById","initScenes","setControls","innerHeight","innerWidth","Static","canvasHeight","init","rect1","rect2","rect3","c1","isDown","watchDownEvent","watchCollision","prohibitDown","getTime","inter","setInterval","clearInterval","updateCirclePosition","activationCircle","backgroundImage","addCircle","bx","by","ax","ay","findIndex","circleNew","pages_Matter","_h","$createElement","_self","_c","attrs","staticRenderFns","Component","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/2.7bfcb98096d083e7166f.js","sourcesContent":["/*!\n * matter-js 0.18.0 by @liabru\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Matter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Matter\"] = factory();\n\telse\n\t\troot[\"Matter\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 21);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n    Common._warnedOnce = {};\n    Common._decomp = null;\n    \n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result is in milliseconds and will use high-resolution timing if available.\n     * @method now\n     * @return {number} the current timestamp in milliseconds\n     */\n    Common.now = function() {\n        if (typeof window !== 'undefined' && window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        if (Date.now) {\n            return Date.now();\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @property Common.logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Uses `Common.warn` to log the given message one time only.\n     * @method warnOnce\n     * @param ...objs {} The objects to log.\n     */\n    Common.warnOnce = function() {\n        var message = Array.prototype.slice.call(arguments).join(' ');\n\n        if (!Common._warnedOnce[message]) {\n            Common.warn(message);\n            Common._warnedOnce[message] = true;\n        }\n    };\n\n    /**\n     * Shows a deprecated console warning when the function on the given object is called.\n     * The target function will be replaced with a new function that first shows the warning\n     * and then calls the original function.\n     * @method deprecated\n     * @param {object} obj The object or module\n     * @param {string} name The property name of the function on obj\n     * @param {string} warning The one-time message to show if the function is called\n     */\n    Common.deprecated = function(obj, prop, warning) {\n        obj[prop] = Common.chain(function() {\n            Common.warnOnce('🔅 deprecated 🔅', warning);\n        }, obj[prop]);\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\n     * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\n     * @method setDecomp\n     * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\n     */\n    Common.setDecomp = function(decomp) {\n        Common._decomp = decomp;\n    };\n\n    /**\n     * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\n     * otherwise returns the global `decomp` if set.\n     * @method getDecomp\n     * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\n     */\n    Common.getDecomp = function() {\n        // get user provided decomp if set\n        var decomp = Common._decomp;\n\n        try {\n            // otherwise from window global\n            if (!decomp && typeof window !== 'undefined') {\n                decomp = window.decomp;\n            }\n    \n            // otherwise from node global\n            if (!decomp && typeof global !== 'undefined') {\n                decomp = global.decomp;\n            }\n        } catch (e) {\n            // decomp not available\n            decomp = null;\n        }\n\n        return decomp;\n    };\n})();\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        scalar = typeof scalar !== 'undefined' ? scalar : 1;\n\n        var verticesLength = vertices.length,\n            translateX = vector.x * scalar,\n            translateY = vector.y * scalar,\n            i;\n        \n        for (i = 0; i < verticesLength; i++) {\n            vertices[i].x += translateX;\n            vertices[i].y += translateY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex,\n            dx,\n            dy,\n            i;\n\n        for (i = 0; i < verticesLength; i++) {\n            vertex = vertices[i];\n            dx = vertex.x - pointX;\n            dy = vertex.y - pointY;\n            vertex.x = pointX + (dx * cos - dy * sin);\n            vertex.y = pointY + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        var pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex = vertices[verticesLength - 1],\n            nextVertex;\n\n        for (var i = 0; i < verticesLength; i++) {\n            nextVertex = vertices[i];\n\n            if ((pointX - vertex.x) * (nextVertex.y - vertex.y) \n                + (pointY - vertex.y) * (vertex.x - nextVertex.x) > 0) {\n                return false;\n            }\n\n            vertex = nextVertex;\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        var events = object.events;\n        \n        if (events && Common.keys(events).length > 0) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\n*\n* They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\n* A composite could contain anything from a single body all the way up to a whole world.\n* \n* When making any changes to composites, use the included functions rather than changing their properties directly.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = __webpack_require__(4);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Body = __webpack_require__(6);\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {},\n            cache: {\n                allBodies: null,\n                allConstraints: null,\n                allComposites: null\n            }\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @private\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (isModified && composite.cache) {\n            composite.cache.allBodies = null;\n            composite.cache.allConstraints = null;\n            composite.cache.allComposites = null;\n        }\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for (var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {object|array} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        if (composite.cache && composite.cache.allBodies) {\n            return composite.cache.allBodies;\n        }\n\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allBodies = bodies;\n        }\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        if (composite.cache && composite.cache.allConstraints) {\n            return composite.cache.allConstraints;\n        }\n\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allConstraints = constraints;\n        }\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        if (composite.cache && composite.cache.allComposites) {\n            return composite.cache.allComposites;\n        }\n\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allComposites = composites;\n        }\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n            .concat(Composite.allConstraints(composite))\n            .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * This is automatically managed when bodies, constraints or composites are added or removed.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * An object used for storing cached results for performance reasons.\n     * This is used internally only and is automatically managed.\n     *\n     * @private\n     * @property cache\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Body` module contains methods for creating and manipulating body models.\n* A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\n* Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Render = __webpack_require__(16);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(11);\n\n(function() {\n\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                strokeStyle: null,\n                fillStyle: null,\n                lineWidth: null,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                }\n            },\n            events: null,\n            bounds: null,\n            chamfer: null,\n            circleRadius: 0,\n            positionPrev: null,\n            anglePrev: 0,\n            parent: null,\n            axes: null,\n            area: 0,\n            mass: 0,\n            inertia: 0,\n            _original: null\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#14151f' : Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1'])),\n            defaultStrokeStyle = body.isStatic ? '#555' : '#ccc',\n            defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            if (!Object.prototype.hasOwnProperty.call(settings, property))\n                continue;\n\n            value = settings[property];\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            case 'centre':\n                Body.setCentre(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                part._original = null;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia (i.e. second moment of area) of the body. \n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull, concave hulls are not supported.\n     *\n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param [body] parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Set the centre of mass of the body. \n     * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n     * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n     * This is equal to moving `body.position` but not the `body.vertices`.\n     * Invalid if the `centre` falls outside the body's convex hull.\n     * @method setCentre\n     * @param {body} body\n     * @param {vector} centre\n     * @param {bool} relative\n     */\n    Body.setCentre = function(body, centre, relative) {\n        if (!relative) {\n            body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n            body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n            body.position.x = centre.x;\n            body.position.y = centre.y;\n        } else {\n            body.positionPrev.x += centre.x;\n            body.positionPrev.y += centre.y;\n            body.position.x += centre.x;\n            body.position.y += centre.y;\n        }\n    };\n\n    /**\n     * Sets the position of the body instantly. Velocity, angle, force etc. are unchanged.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     */\n    Body.setPosition = function(body, position) {\n        var delta = Vector.sub(position, body.position);\n        body.positionPrev.x += delta.x;\n        body.positionPrev.y += delta.y;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body instantly. Angular velocity, position, force etc. are unchanged.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     */\n    Body.setAngle = function(body, angle) {\n        var delta = angle - body.angle;\n        body.anglePrev += delta;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the linear velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        body.positionPrev.x = body.position.x - velocity.x;\n        body.positionPrev.y = body.position.y - velocity.y;\n        body.velocity.x = velocity.x;\n        body.velocity.y = velocity.y;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Sets the angular velocity of the body instantly. Position, angle, force etc. are unchanged. See also `Body.applyForce`.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        body.anglePrev = body.angle - velocity;\n        body.angularVelocity = velocity;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position, without imparting any velocity.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     */\n    Body.translate = function(body, translation) {\n        Body.setPosition(body, Vector.add(body.position, translation));\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle, without imparting any angular velocity.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     */\n    Body.rotate = function(body, rotation, point) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.setAngle(body, body.angle + rotation);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs a simulation step for the given `body`, including updating position and angle using Verlet integration.\n     * @method update\n     * @param {body} body\n     * @param {number} deltaTime\n     * @param {number} timeScale\n     * @param {number} correction\n     */\n    Body.update = function(body, deltaTime, timeScale, correction) {\n        var deltaTimeSquared = Math.pow(deltaTime * timeScale * body.timeScale, 2);\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * timeScale * body.timeScale,\n            velocityPrevX = body.position.x - body.positionPrev.x,\n            velocityPrevY = body.position.y - body.positionPrev.y;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir * correction) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir * correction) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // track speed and acceleration\n        body.speed = Vector.magnitude(body.velocity);\n        body.angularSpeed = Math.abs(body.angularVelocity);\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Applies a force to a body from a given world-space position, including resulting torque.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        body.force.x += force.x;\n        body.force.y += force.y;\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"body\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * A self reference if the body is _not_ a part of another body.\n     * Otherwise this is a reference to the body that this is a part of.\n     * See `body.parts`.\n     *\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * When passed via `Body.create`, the vertices are translated relative to `body.position` (i.e. world-space, and constantly updated by `Body.update` during simulation).\n     * The `Vector` objects are also augmented with additional properties required for efficient collision detection. \n     *\n     * Other properties such as `inertia` and `bounds` are automatically calculated from the passed vertices (unless provided via `options`).\n     * Concave hulls are not currently supported. The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * A `Vector` that specifies the current world-space position of the body.\n     *\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the force to apply in the current step. It is zeroed after every `Body.update`. See also `Body.applyForce`.\n     *\n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the torque (turning force) to apply in the current step. It is zeroed after every `Body.update`.\n     *\n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.velocity`).\n     *\n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular speed of the body after the last `Body.update`. It is read-only and always positive (it's the magnitude of `body.angularVelocity`).\n     *\n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Vector` that _measures_ the current velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's velocity directly, you should either apply a force or simply change the body's `position` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that _measures_ the current angular velocity of the body after the last `Body.update`. It is read-only. \n     * If you need to modify a body's angular velocity directly, you should apply a torque or simply change the body's `angle` (as the engine uses position-Verlet integration).\n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     * If you need to set a body as static after its creation, you should use `Body.setStatic` as this requires more than just setting this flag.\n     *\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     * If you need to set a body as sleeping, you should use `Sleeping.set` as this requires more than just setting this flag.\n     *\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that _measures_ the amount of movement a body currently has (a combination of `speed` and `angularSpeed`). It is read-only and always positive.\n     * It is used and updated by the `Matter.Sleeping` module during simulation to decide if a body has come to rest.\n     *\n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     *\n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * A `Number` that defines the density of the body, that is its mass per unit area.\n     * If you pass the density via `Body.create` the `mass` property is automatically calculated for you based on the size (area) of the object.\n     * This is generally preferable to simply setting mass and allows for more intuitive definition of materials (e.g. rock has a higher density than wood).\n     *\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * A `Number` that defines the mass of the body, although it may be more appropriate to specify the `density` property instead.\n     * If you modify this value, you must also modify the `body.inverseMass` property (`1 / mass`).\n     *\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     * If you modify this value, you must also modify the `body.mass` property.\n     *\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the moment of inertia (i.e. second moment of area) of the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) and density in `Body.create`.\n     * If you modify this value, you must also modify the `body.inverseInertia` property (`1 / inertia`).\n     *\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * If you modify this value, you must also modify the `body.inertia` property.\n     *\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     *     Math.max(bodyA.restitution, bodyB.restitution)\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     *     Math.min(bodyA.friction, bodyB.friction)\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a tolerance on how far a body is allowed to 'sink' or rotate into other bodies.\n     * Avoid changing this value unless you understand the purpose of `slop` in physics engines.\n     * The default should generally suffice, although very large bodies may require larger values for stable stacking.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that allows per-body time scaling, e.g. a force-field where bodies inside are in slow-motion, while others are at full speed.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated from the given convex hull (`vertices` array) in `Body.create`.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * A `Number` that _measures_ the area of the body's convex hull, calculated at creation by `Body.create`.\n     *\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated from the given convex hull (`vertices` array) in `Body.create` and constantly updated by `Body.update` during simulation.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Events = __webpack_require__(4);\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} timeScale\n     */\n    Sleeping.update = function(bodies, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                motion = body.speed * body.speed + body.angularSpeed * body.angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n            \n            if (body.sleepThreshold > 0 && body.motion < Sleeping._motionSleepThreshold * timeFactor) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold)\n                    Sleeping.set(body, true);\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Sleeping.afterCollisions = function(pairs, timeScale) {\n        var timeFactor = timeScale * timeScale * timeScale;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > Sleeping._motionWakeThreshold * timeFactor) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Collision` module contains methods for detecting collisions between a given pair of bodies.\n*\n* For efficient detection between a list of bodies, see `Matter.Detector` and `Matter.Query`.\n*\n* See `Matter.Engine` for collision events.\n*\n* @class Collision\n*/\n\nvar Collision = {};\n\nmodule.exports = Collision;\n\nvar Vertices = __webpack_require__(3);\nvar Pair = __webpack_require__(9);\n\n(function() {\n    var _supports = [];\n\n    var _overlapAB = {\n        overlap: 0,\n        axis: null\n    };\n\n    var _overlapBA = {\n        overlap: 0,\n        axis: null\n    };\n\n    /**\n     * Creates a new collision record.\n     * @method create\n     * @param {body} bodyA The first body part represented by the collision record\n     * @param {body} bodyB The second body part represented by the collision record\n     * @return {collision} A new collision record\n     */\n    Collision.create = function(bodyA, bodyB) {\n        return { \n            pair: null,\n            collided: false,\n            bodyA: bodyA,\n            bodyB: bodyB,\n            parentA: bodyA.parent,\n            parentB: bodyB.parent,\n            depth: 0,\n            normal: { x: 0, y: 0 },\n            tangent: { x: 0, y: 0 },\n            penetration: { x: 0, y: 0 },\n            supports: []\n        };\n    };\n\n    /**\n     * Detect collision between two bodies.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {pairs} [pairs] Optionally reuse collision records from existing pairs.\n     * @return {collision|null} A collision record if detected, otherwise null\n     */\n    Collision.collides = function(bodyA, bodyB, pairs) {\n        Collision._overlapAxes(_overlapAB, bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n        if (_overlapAB.overlap <= 0) {\n            return null;\n        }\n\n        Collision._overlapAxes(_overlapBA, bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n        if (_overlapBA.overlap <= 0) {\n            return null;\n        }\n\n        // reuse collision records for gc efficiency\n        var pair = pairs && pairs.table[Pair.id(bodyA, bodyB)],\n            collision;\n\n        if (!pair) {\n            collision = Collision.create(bodyA, bodyB);\n            collision.collided = true;\n            collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n            collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n            collision.parentA = collision.bodyA.parent;\n            collision.parentB = collision.bodyB.parent;\n        } else {\n            collision = pair.collision;\n        }\n\n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        var minOverlap;\n\n        if (_overlapAB.overlap < _overlapBA.overlap) {\n            minOverlap = _overlapAB;\n        } else {\n            minOverlap = _overlapBA;\n        }\n\n        var normal = collision.normal,\n            supports = collision.supports,\n            minAxis = minOverlap.axis,\n            minAxisX = minAxis.x,\n            minAxisY = minAxis.y;\n\n        // ensure normal is facing away from bodyA\n        if (minAxisX * (bodyB.position.x - bodyA.position.x) + minAxisY * (bodyB.position.y - bodyA.position.y) < 0) {\n            normal.x = minAxisX;\n            normal.y = minAxisY;\n        } else {\n            normal.x = -minAxisX;\n            normal.y = -minAxisY;\n        }\n        \n        collision.tangent.x = -normal.y;\n        collision.tangent.y = normal.x;\n\n        collision.depth = minOverlap.overlap;\n\n        collision.penetration.x = normal.x * collision.depth;\n        collision.penetration.y = normal.y * collision.depth;\n\n        // find support points, there is always either exactly one or two\n        var supportsB = Collision._findSupports(bodyA, bodyB, normal, 1),\n            supportCount = 0;\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, supportsB[0])) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        if (Vertices.contains(bodyA.vertices, supportsB[1])) {\n            supports[supportCount++] = supportsB[1];\n        }\n\n        // find the supports from bodyA that are inside bodyB\n        if (supportCount < 2) {\n            var supportsA = Collision._findSupports(bodyB, bodyA, normal, -1);\n\n            if (Vertices.contains(bodyB.vertices, supportsA[0])) {\n                supports[supportCount++] = supportsA[0];\n            }\n\n            if (supportCount < 2 && Vertices.contains(bodyB.vertices, supportsA[1])) {\n                supports[supportCount++] = supportsA[1];\n            }\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supportCount === 0) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        // update supports array size\n        supports.length = supportCount;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {object} result\n     * @param {vertices} verticesA\n     * @param {vertices} verticesB\n     * @param {axes} axes\n     */\n    Collision._overlapAxes = function(result, verticesA, verticesB, axes) {\n        var verticesALength = verticesA.length,\n            verticesBLength = verticesB.length,\n            verticesAX = verticesA[0].x,\n            verticesAY = verticesA[0].y,\n            verticesBX = verticesB[0].x,\n            verticesBY = verticesB[0].y,\n            axesLength = axes.length,\n            overlapMin = Number.MAX_VALUE,\n            overlapAxisNumber = 0,\n            overlap,\n            overlapAB,\n            overlapBA,\n            dot,\n            i,\n            j;\n\n        for (i = 0; i < axesLength; i++) {\n            var axis = axes[i],\n                axisX = axis.x,\n                axisY = axis.y,\n                minA = verticesAX * axisX + verticesAY * axisY,\n                minB = verticesBX * axisX + verticesBY * axisY,\n                maxA = minA,\n                maxB = minB;\n            \n            for (j = 1; j < verticesALength; j += 1) {\n                dot = verticesA[j].x * axisX + verticesA[j].y * axisY;\n\n                if (dot > maxA) { \n                    maxA = dot;\n                } else if (dot < minA) { \n                    minA = dot;\n                }\n            }\n\n            for (j = 1; j < verticesBLength; j += 1) {\n                dot = verticesB[j].x * axisX + verticesB[j].y * axisY;\n\n                if (dot > maxB) { \n                    maxB = dot;\n                } else if (dot < minB) { \n                    minB = dot;\n                }\n            }\n\n            overlapAB = maxA - minB;\n            overlapBA = maxB - minA;\n            overlap = overlapAB < overlapBA ? overlapAB : overlapBA;\n\n            if (overlap < overlapMin) {\n                overlapMin = overlap;\n                overlapAxisNumber = i;\n\n                if (overlap <= 0) {\n                    // can not be intersecting\n                    break;\n                }\n            } \n        }\n\n        result.axis = axes[overlapAxisNumber];\n        result.overlap = overlapMin;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    Collision._projectToAxis = function(projection, vertices, axis) {\n        var min = vertices[0].x * axis.x + vertices[0].y * axis.y,\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = vertices[i].x * axis.x + vertices[i].y * axis.y;\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n\n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {vector} normal\n     * @param {number} direction\n     * @return [vector]\n     */\n    Collision._findSupports = function(bodyA, bodyB, normal, direction) {\n        var vertices = bodyB.vertices,\n            verticesLength = vertices.length,\n            bodyAPositionX = bodyA.position.x,\n            bodyAPositionY = bodyA.position.y,\n            normalX = normal.x * direction,\n            normalY = normal.y * direction,\n            nearestDistance = Number.MAX_VALUE,\n            vertexA,\n            vertexB,\n            vertexC,\n            distance,\n            j;\n\n        // find deepest vertex relative to the axis\n        for (j = 0; j < verticesLength; j += 1) {\n            vertexB = vertices[j];\n            distance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y);\n\n            // convex hill-climbing\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertexB;\n            }\n        }\n\n        // measure next vertex\n        vertexC = vertices[(verticesLength + vertexA.index - 1) % verticesLength];\n        nearestDistance = normalX * (bodyAPositionX - vertexC.x) + normalY * (bodyAPositionY - vertexC.y);\n\n        // compare with previous vertex\n        vertexB = vertices[(vertexA.index + 1) % verticesLength];\n        if (normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y) < nearestDistance) {\n            _supports[0] = vertexA;\n            _supports[1] = vertexB;\n\n            return _supports;\n        }\n\n        _supports[0] = vertexA;\n        _supports[1] = vertexC;\n\n        return _supports;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A reference to the pair using this collision record, if there is one.\n     *\n     * @property pair\n     * @type {pair|null}\n     * @default null\n     */\n\n    /**\n     * A flag that indicates if the bodies were colliding when the collision was last updated.\n     * \n     * @property collided\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The first body part represented by the collision (see also `collision.parentA`).\n     * \n     * @property bodyA\n     * @type body\n     */\n\n    /**\n     * The second body part represented by the collision (see also `collision.parentB`).\n     * \n     * @property bodyB\n     * @type body\n     */\n\n    /**\n     * The first body represented by the collision (i.e. `collision.bodyA.parent`).\n     * \n     * @property parentA\n     * @type body\n     */\n\n    /**\n     * The second body represented by the collision (i.e. `collision.bodyB.parent`).\n     * \n     * @property parentB\n     * @type body\n     */\n\n    /**\n     * A `Number` that represents the minimum separating distance between the bodies along the collision normal.\n     *\n     * @readOnly\n     * @property depth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A normalised `Vector` that represents the direction between the bodies that provides the minimum separating distance.\n     *\n     * @property normal\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A normalised `Vector` that is the tangent direction to the collision normal.\n     *\n     * @property tangent\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that represents the direction and depth of the collision.\n     *\n     * @property penetration\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * An array of body vertices that represent the support points in the collision.\n     * These are the deepest vertices (along the collision normal) of each body that are contained by the other body's vertices.\n     *\n     * @property supports\n     * @type vector[]\n     * @default []\n     */\n\n})();\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = __webpack_require__(17);\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            collision: collision,\n            contacts: [],\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            confirmedActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: 0,\n            friction: 0,\n            frictionStatic: 0,\n            restitution: 0,\n            slop: 0\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB,\n            parentAVerticesLength = parentA.vertices.length;\n        \n        pair.isActive = true;\n        pair.timeUpdated = timestamp;\n        pair.collision = collision;\n        pair.separation = collision.depth;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = parentA.friction < parentB.friction ? parentA.friction : parentB.friction;\n        pair.frictionStatic = parentA.frictionStatic > parentB.frictionStatic ? parentA.frictionStatic : parentB.frictionStatic;\n        pair.restitution = parentA.restitution > parentB.restitution ? parentA.restitution : parentB.restitution;\n        pair.slop = parentA.slop > parentB.slop ? parentA.slop : parentB.slop;\n\n        collision.pair = pair;\n        activeContacts.length = 0;\n        \n        for (var i = 0; i < supports.length; i++) {\n            var support = supports[i],\n                contactId = support.body === parentA ? support.index : parentAVerticesLength + support.index,\n                contact = contacts[contactId];\n\n            if (contact) {\n                activeContacts.push(contact);\n            } else {\n                activeContacts.push(contacts[contactId] = Contact.create(support));\n            }\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(11);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} timeScale\n     */\n    Constraint.solveAll = function(constraints, timeScale) {\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n\n        if (constraint.damping) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (constraint.damping) {\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n     * @method pointAWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointAWorld = function(constraint) {\n        return {\n            x: (constraint.bodyA ? constraint.bodyA.position.x : 0) + constraint.pointA.x,\n            y: (constraint.bodyA ? constraint.bodyA.position.y : 0) + constraint.pointA.y\n        };\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n     * @method pointBWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointBWorld = function(constraint) {\n        return {\n            x: (constraint.bodyB ? constraint.bodyB.position.x : 0) + constraint.pointB.x,\n            y: (constraint.bodyB ? constraint.bodyB.position.y : 0) + constraint.pointB.y\n        };\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = __webpack_require__(3);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\nvar Bounds = __webpack_require__(1);\nvar Vector = __webpack_require__(2);\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Utility to create a compound body based on set(s) of vertices.\n     * \n     * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n     * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\n     * \n     * The resulting vertices are reorientated about their centre of mass,\n     * and offset such that `body.position` corresponds to this point.\n     * \n     * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\n     * To later move the centre of mass see `Body.setCentre`.\n     * \n     * Note that automatic conconcave decomposition results are not always optimal. \n     * For best results, simplify the input vertices as much as possible first.\n     * By default this function applies some addtional simplification to help.\n     * \n     * Some outputs may also require further manual processing afterwards to be robust.\n     * In particular some parts may need to be overlapped to avoid collision gaps.\n     * Thin parts and sharp points should be avoided or removed where possible.\n     *\n     * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n     * \n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\n     * @param {object} [options] The body options.\n     * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\n     * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\n     * @param {number} [minimumArea=10] Threshold when removing small parts.\n     * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n        var decomp = Common.getDecomp(),\n            canDecomp,\n            body,\n            parts,\n            isConvex,\n            isConcave,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        // check decomp is as expected\n        canDecomp = Boolean(decomp && decomp.quickDecomp);\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n        removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01;\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n            isConcave = !isConvex;\n\n            if (isConcave && !canDecomp) {\n                Common.warnOnce(\n                    'Bodies.fromVertices: Install the \\'poly-decomp\\' library and use Common.setDecomp or provide \\'decomp\\' as a global to decompose concave vertices.'\n                );\n            }\n\n            if (isConvex || !canDecomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n                if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints)\n                    decomp.removeDuplicatePoints(concave, removeDuplicatePoints);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n\n            // offset such that body.position is at the centre off mass\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Detector` module contains methods for efficiently detecting collisions between a list of bodies using a broadphase algorithm.\n*\n* @class Detector\n*/\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar Common = __webpack_require__(0);\nvar Collision = __webpack_require__(8);\n\n(function() {\n\n    /**\n     * Creates a new collision detector.\n     * @method create\n     * @param {} options\n     * @return {detector} A new collision detector\n     */\n    Detector.create = function(options) {\n        var defaults = {\n            bodies: [],\n            pairs: null\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * Sets the list of bodies in the detector.\n     * @method setBodies\n     * @param {detector} detector\n     * @param {body[]} bodies\n     */\n    Detector.setBodies = function(detector, bodies) {\n        detector.bodies = bodies.slice(0);\n    };\n\n    /**\n     * Clears the detector including its list of bodies.\n     * @method clear\n     * @param {detector} detector\n     */\n    Detector.clear = function(detector) {\n        detector.bodies = [];\n    };\n\n    /**\n     * Efficiently finds all collisions among all the bodies in `detector.bodies` using a broadphase algorithm.\n     * \n     * _Note:_ The specific ordering of collisions returned is not guaranteed between releases and may change for performance reasons.\n     * If a specific ordering is required then apply a sort to the resulting array.\n     * @method collisions\n     * @param {detector} detector\n     * @return {collision[]} collisions\n     */\n    Detector.collisions = function(detector) {\n        var collisions = [],\n            pairs = detector.pairs,\n            bodies = detector.bodies,\n            bodiesLength = bodies.length,\n            canCollide = Detector.canCollide,\n            collides = Collision.collides,\n            i,\n            j;\n\n        bodies.sort(Detector._compareBoundsX);\n\n        for (i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                boundsA = bodyA.bounds,\n                boundXMax = bodyA.bounds.max.x,\n                boundYMax = bodyA.bounds.max.y,\n                boundYMin = bodyA.bounds.min.y,\n                bodyAStatic = bodyA.isStatic || bodyA.isSleeping,\n                partsALength = bodyA.parts.length,\n                partsASingle = partsALength === 1;\n\n            for (j = i + 1; j < bodiesLength; j++) {\n                var bodyB = bodies[j],\n                    boundsB = bodyB.bounds;\n\n                if (boundsB.min.x > boundXMax) {\n                    break;\n                }\n\n                if (boundYMax < boundsB.min.y || boundYMin > boundsB.max.y) {\n                    continue;\n                }\n\n                if (bodyAStatic && (bodyB.isStatic || bodyB.isSleeping)) {\n                    continue;\n                }\n\n                if (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) {\n                    continue;\n                }\n\n                var partsBLength = bodyB.parts.length;\n\n                if (partsASingle && partsBLength === 1) {\n                    var collision = collides(bodyA, bodyB, pairs);\n\n                    if (collision) {\n                        collisions.push(collision);\n                    }\n                } else {\n                    var partsAStart = partsALength > 1 ? 1 : 0,\n                        partsBStart = partsBLength > 1 ? 1 : 0;\n                    \n                    for (var k = partsAStart; k < partsALength; k++) {\n                        var partA = bodyA.parts[k],\n                            boundsA = partA.bounds;\n\n                        for (var z = partsBStart; z < partsBLength; z++) {\n                            var partB = bodyB.parts[z],\n                                boundsB = partB.bounds;\n\n                            if (boundsA.min.x > boundsB.max.x || boundsA.max.x < boundsB.min.x\n                                || boundsA.max.y < boundsB.min.y || boundsA.min.y > boundsB.max.y) {\n                                continue;\n                            }\n\n                            var collision = collides(partA, partB, pairs);\n\n                            if (collision) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n    /**\n     * The comparison function used in the broadphase algorithm.\n     * Returns the signed delta of the bodies bounds on the x-axis.\n     * @private\n     * @method _sortCompare\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {number} The signed delta used for sorting\n     */\n    Detector._compareBoundsX = function(bodyA, bodyB) {\n        return bodyA.bounds.min.x - bodyB.bounds.min.x;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The array of `Matter.Body` between which the detector finds collisions.\n     * \n     * _Note:_ The order of bodies in this array _is not fixed_ and will be continually managed by the detector.\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * Optional. A `Matter.Pairs` object from which previous collision objects may be reused. Intended for internal `Matter.Engine` usage.\n     * @property pairs\n     * @type {pairs|null}\n     * @default null\n     */\n\n})();\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-+]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Greater than ranges e.g. `>1.2.3`\n     * - Greater than or equal ranges e.g. `>=1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-+]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var parts = pattern.exec(range);\n        var major = Number(parts[4]);\n        var minor = Number(parts[5]);\n        var patch = Number(parts[6]);\n\n        return {\n            isRange: Boolean(parts[1] || parts[2]),\n            version: parts[3],\n            range: range,\n            operator: parts[1] || parts[2] || '',\n            major: major,\n            minor: minor,\n            patch: patch,\n            parts: [major, minor, patch],\n            prerelease: parts[7],\n            number: major * 1e8 + minor * 1e4 + patch\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var r = Plugin.versionParse(range),\n            v = Plugin.versionParse(version);\n\n        if (r.isRange) {\n            if (r.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (r.operator === '>') {\n                return v.number > r.number;\n            }\n\n            if (r.operator === '>=') {\n                return v.number >= r.number;\n            }\n\n            if (r.operator === '~') {\n                return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n            }\n\n            if (r.operator === '^') {\n                if (r.major > 0) {\n                    return v.major === r.major && v.number >= r.number;\n                }\n\n                if (r.minor > 0) {\n                    return v.minor === r.minor && v.patch >= r.patch;\n                }\n\n                return v.patch === r.patch;\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Render` module is a simple canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Common = __webpack_require__(0);\nvar Composite = __webpack_require__(5);\nvar Bounds = __webpack_require__(1);\nvar Events = __webpack_require__(4);\nvar Vector = __webpack_require__(2);\nvar Mouse = __webpack_require__(13);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    Render._goodFps = 30;\n    Render._goodDelta = 1000 / 60;\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            controller: Render,\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            timing: {\n                historySize: 60,\n                delta: 0,\n                deltaHistory: [],\n                lastTime: 0,\n                lastTimestamp: 0,\n                lastElapsed: 0,\n                timestampElapsed: 0,\n                timestampElapsedHistory: [],\n                engineDeltaHistory: [],\n                engineElapsedHistory: [],\n                elapsedHistory: []\n            },\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#14151f',\n                wireframeBackground: '#14151f',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showStats: false,\n                showPerformance: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        // for temporary back compatibility only\n        render.options.showBroadphase = false;\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        } else if (!render.canvas.parentNode) {\n            Common.log('Render.create: options.element was undefined, render.canvas was created but not appended', 'warn');\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            \n            _updateTiming(render, time);\n\n            Render.world(render, time);\n\n            if (render.options.showStats || render.options.showDebug) {\n                Render.stats(render, render.context, time);\n            }\n\n            if (render.options.showPerformance || render.options.showDebug) {\n                Render.performance(render, render.context, time);\n            }\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.setTransform(\n            render.options.pixelRatio / boundsScaleX, 0, 0, \n            render.options.pixelRatio / boundsScaleY, 0, 0\n        );\n        \n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render, time) {\n        var startTime = Common.now(),\n            engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            timing = render.timing;\n\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n\n            if (render.options.pixelRatio !== 1) {\n                render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n            }\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n\n        // log the time elapsed computing this update\n        timing.lastElapsed = Common.now() - startTime;\n    };\n\n    /**\n     * Renders statistics about the engine and world useful for debugging.\n     * @private\n     * @method stats\n     * @param {render} render\n     * @param {RenderingContext} context\n     * @param {Number} time\n     */\n    Render.stats = function(render, context, time) {\n        var engine = render.engine,\n            world = engine.world,\n            bodies = Composite.allBodies(world),\n            parts = 0,\n            width = 55,\n            height = 44,\n            x = 0,\n            y = 0;\n        \n        // count parts\n        for (var i = 0; i < bodies.length; i += 1) {\n            parts += bodies[i].parts.length;\n        }\n\n        // sections\n        var sections = {\n            'Part': parts,\n            'Body': bodies.length,\n            'Cons': Composite.allConstraints(world).length,\n            'Comp': Composite.allComposites(world).length,\n            'Pair': engine.pairs.list.length\n        };\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(x, y, width * 5.5, height);\n\n        context.font = '12px Arial';\n        context.textBaseline = 'top';\n        context.textAlign = 'right';\n\n        // sections\n        for (var key in sections) {\n            var section = sections[key];\n            // label\n            context.fillStyle = '#aaa';\n            context.fillText(key, x + width, y + 8);\n\n            // value\n            context.fillStyle = '#eee';\n            context.fillText(section, x + width, y + 26);\n\n            x += width;\n        }\n    };\n\n    /**\n     * Renders engine and render performance information.\n     * @private\n     * @method performance\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.performance = function(render, context) {\n        var engine = render.engine,\n            timing = render.timing,\n            deltaHistory = timing.deltaHistory,\n            elapsedHistory = timing.elapsedHistory,\n            timestampElapsedHistory = timing.timestampElapsedHistory,\n            engineDeltaHistory = timing.engineDeltaHistory,\n            engineElapsedHistory = timing.engineElapsedHistory,\n            lastEngineDelta = engine.timing.lastDelta;\n        \n        var deltaMean = _mean(deltaHistory),\n            elapsedMean = _mean(elapsedHistory),\n            engineDeltaMean = _mean(engineDeltaHistory),\n            engineElapsedMean = _mean(engineElapsedHistory),\n            timestampElapsedMean = _mean(timestampElapsedHistory),\n            rateMean = (timestampElapsedMean / deltaMean) || 0,\n            fps = (1000 / deltaMean) || 0;\n\n        var graphHeight = 4,\n            gap = 12,\n            width = 60,\n            height = 34,\n            x = 10,\n            y = 69;\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(0, 50, gap * 4 + width * 5 + 22, height);\n\n        // show FPS\n        Render.status(\n            context, x, y, width, graphHeight, deltaHistory.length, \n            Math.round(fps) + ' fps', \n            fps / Render._goodFps,\n            function(i) { return (deltaHistory[i] / deltaMean) - 1; }\n        );\n\n        // show engine delta\n        Render.status(\n            context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length,\n            lastEngineDelta.toFixed(2) + ' dt', \n            Render._goodDelta / lastEngineDelta,\n            function(i) { return (engineDeltaHistory[i] / engineDeltaMean) - 1; }\n        );\n\n        // show engine update time\n        Render.status(\n            context, x + (gap + width) * 2, y, width, graphHeight, engineElapsedHistory.length,\n            engineElapsedMean.toFixed(2) + ' ut', \n            1 - (engineElapsedMean / Render._goodFps),\n            function(i) { return (engineElapsedHistory[i] / engineElapsedMean) - 1; }\n        );\n\n        // show render time\n        Render.status(\n            context, x + (gap + width) * 3, y, width, graphHeight, elapsedHistory.length,\n            elapsedMean.toFixed(2) + ' rt', \n            1 - (elapsedMean / Render._goodFps),\n            function(i) { return (elapsedHistory[i] / elapsedMean) - 1; }\n        );\n\n        // show effective speed\n        Render.status(\n            context, x + (gap + width) * 4, y, width, graphHeight, timestampElapsedHistory.length, \n            rateMean.toFixed(2) + ' x', \n            rateMean * rateMean * rateMean,\n            function(i) { return (((timestampElapsedHistory[i] / deltaHistory[i]) / rateMean) || 0) - 1; }\n        );\n    };\n\n    /**\n     * Renders a label, indicator and a chart.\n     * @private\n     * @method status\n     * @param {RenderingContext} context\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} count\n     * @param {string} label\n     * @param {string} indicator\n     * @param {function} plotY\n     */\n    Render.status = function(context, x, y, width, height, count, label, indicator, plotY) {\n        // background\n        context.strokeStyle = '#888';\n        context.fillStyle = '#444';\n        context.lineWidth = 1;\n        context.fillRect(x, y + 7, width, 1);\n\n        // chart\n        context.beginPath();\n        context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\n        for (var i = 0; i < width; i += 1) {\n            context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\n        }\n        context.stroke();\n\n        // indicator\n        context.fillStyle = 'hsl(' + Common.clamp(25 + 95 * indicator, 0, 120) + ',100%,60%)';\n        context.fillRect(x, y - 7, 4, 4);\n\n        // label\n        context.font = '12px Arial';\n        context.textBaseline = 'middle';\n        context.textAlign = 'right';\n        context.fillStyle = '#eee';\n        context.fillText(label, x + width, y - 5);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                            (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + (body.position.x - body.positionPrev.x) * 2, body.position.y + (body.position.y - body.positionPrev.y) * 2);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                    Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Updates render timing.\n     * @method _updateTiming\n     * @private\n     * @param {render} render\n     * @param {number} time\n     */\n    var _updateTiming = function(render, time) {\n        var engine = render.engine,\n            timing = render.timing,\n            historySize = timing.historySize,\n            timestamp = engine.timing.timestamp;\n\n        timing.delta = time - timing.lastTime || Render._goodDelta;\n        timing.lastTime = time;\n\n        timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\n        timing.lastTimestamp = timestamp;\n\n        timing.deltaHistory.unshift(timing.delta);\n        timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\n\n        timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\n        timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\n\n        timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\n        timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\n\n        timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\n        timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\n\n        timing.elapsedHistory.unshift(timing.lastElapsed);\n        timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\n    };\n\n    /**\n     * Returns the mean value of the given numbers.\n     * @method _mean\n     * @private\n     * @param {Number[]} values\n     * @return {Number} the mean of given values\n     */\n    var _mean = function(values) {\n        var result = 0;\n        for (var i = 0; i < values.length; i += 1) {\n            result += values[i];\n        }\n        return (result / values.length) || 0;\n    };\n\n    /**\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n    /**\n     * The mouse to render if `render.options.showMousePosition` is enabled.\n     *\n     * @property mouse\n     * @type mouse\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\n     *\n     * @property options.pixelRatio\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is disabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.background\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is enabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.wireframeBackground\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable all debug information overlays together.  \n     * This includes and has priority over the values of:\n     *\n     * - `render.options.showStats`\n     * - `render.options.showPerformance`\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the engine stats info overlay.  \n     * From left to right, the values shown are:\n     *\n     * - body parts total\n     * - body total\n     * - constraints total\n     * - composites total\n     * - collision pairs total\n     *\n     * @property options.showStats\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable performance charts.  \n     * From left to right, the values shown are:\n     *\n     * - average render frequency (e.g. 60 fps)\n     * - exact engine delta time used for last update (e.g. 16.66ms)\n     * - average engine execution duration (e.g. 5.00ms)\n     * - average render execution duration (e.g. 0.40ms)\n     * - average effective play speed (e.g. '1.00x' is 'real-time')\n     *\n     * Each value is recorded over a fixed sample of past frames (60 frames).\n     *\n     * A chart shown below each value indicates the variance from the average over the sample.\n     * The more stable or fixed the value is the flatter the chart will appear.\n     *\n     * @property options.showPerformance\n     * @type boolean\n     * @default false\n     */\n    \n    /**\n     * A flag to enable or disable rendering entirely.\n     *\n     * @property options.enabled\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\n     *\n     * @property options.wireframes\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable sleeping bodies indicators.\n     *\n     * @property options.showSleeping\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable the debug information overlay.\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision broadphase debug overlay.\n     *\n     * @deprecated no longer implemented\n     * @property options.showBroadphase\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body bounds debug overlay.\n     *\n     * @property options.showBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body velocity debug overlay.\n     *\n     * @property options.showVelocity\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body collisions debug overlay.\n     *\n     * @property options.showCollisions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision resolver separations debug overlay.\n     *\n     * @property options.showSeparations\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body axes debug overlay.\n     *\n     * @property options.showAxes\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body positions debug overlay.\n     *\n     * @property options.showPositions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body angle debug overlay.\n     *\n     * @property options.showAngleIndicator\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body and part ids debug overlay.\n     *\n     * @property options.showIds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body vertex numbers debug overlay.\n     *\n     * @property options.showVertexNumbers\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body convex hulls debug overlay.\n     *\n     * @property options.showConvexHulls\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body internal edges debug overlay.\n     *\n     * @property options.showInternalEdges\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the mouse position debug overlay.\n     *\n     * @property options.showMousePosition\n     * @type boolean\n     * @default false\n     */\n\n})();\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar Sleeping = __webpack_require__(7);\nvar Resolver = __webpack_require__(19);\nvar Detector = __webpack_require__(14);\nvar Pairs = __webpack_require__(20);\nvar Events = __webpack_require__(4);\nvar Composite = __webpack_require__(5);\nvar Constraint = __webpack_require__(10);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(options) {\n        options = options || {};\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            timing: {\n                timestamp: 0,\n                timeScale: 1,\n                lastDelta: 0,\n                lastElapsed: 0\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        engine.world = options.world || Composite.create({ label: 'World' });\n        engine.pairs = options.pairs || Pairs.create();\n        engine.detector = options.detector || Detector.create();\n\n        // for temporary back compatibility only\n        engine.grid = { buckets: [] };\n        engine.world.gravity = engine.gravity;\n        engine.broadphase = engine.grid;\n        engine.metrics = {};\n        \n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` ms.\n     * The `correction` argument is an optional `Number` that specifies the time correction factor to apply to the update.\n     * This can help improve the accuracy of the simulation in cases where `delta` is changing between updates.\n     * The value of `correction` is defined as `delta / lastDelta`, i.e. the percentage change of `delta` over the last step.\n     * Therefore the value is always `1` (no correction) when `delta` constant (or when no correction is desired, which is the default).\n     * See the paper on <a href=\"http://lonesock.net/article/verlet.html\">Time Corrected Verlet</a> for more information.\n     *\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     * @param {number} [correction=1]\n     */\n    Engine.update = function(engine, delta, correction) {\n        var startTime = Common.now();\n\n        delta = delta || 1000 / 60;\n        correction = correction || 1;\n\n        var world = engine.world,\n            detector = engine.detector,\n            pairs = engine.pairs,\n            timing = engine.timing,\n            timestamp = timing.timestamp,\n            i;\n\n        // increment timestamp\n        timing.timestamp += delta * timing.timeScale;\n        timing.lastDelta = delta * timing.timeScale;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get all bodies and all constraints in the world\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n        // update the detector bodies if they have changed\n        if (world.isModified) {\n            Detector.setBodies(detector, allBodies);\n        }\n\n        // reset all composite modified flags\n        if (world.isModified) {\n            Composite.setModified(world, false, false, true);\n        }\n\n        // update sleeping if enabled\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, timing.timeScale);\n\n        // apply gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, engine.gravity);\n\n        // update all body position and rotation by integration\n        Engine._bodiesUpdate(allBodies, delta, timing.timeScale, correction, world.bounds);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // find all collisions\n        detector.pairs = engine.pairs;\n        var collisions = Detector.collisions(detector);\n\n        // update collision pairs\n        Pairs.update(pairs, collisions, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list, timing.timeScale);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, timing.timeScale);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, timing.timeScale);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, timing.timeScale);\n        }\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        // log the time elapsed computing this update\n        engine.timing.lastElapsed = Common.now() - startTime;\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine pairs and detector.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        Pairs.clear(engine.pairs);\n        Detector.clear(engine.detector);\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applys a mass dependant force to all given bodies.\n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // apply gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applys `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} deltaTime \n     * The amount of time elapsed between updates\n     * @param {number} timeScale\n     * @param {number} correction \n     * The Verlet correction factor (deltaTime / lastDeltaTime)\n     * @param {bounds} worldBounds\n     */\n    Engine._bodiesUpdate = function(bodies, deltaTime, timeScale, correction, worldBounds) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, deltaTime, timeScale, correction);\n        }\n    };\n\n    /**\n     * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\n     * @deprecated use Matter.Runner.run(engine) instead\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     *\n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\n     * It is updated by timing from the start of the last `Engine.update` call until it ends.\n     *\n     * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\n     *\n     * @property timing.lastElapsed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the `delta` value used in the last engine update.\n     *\n     * @property timing.lastDelta\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Matter.Detector` instance.\n     *\n     * @property detector\n     * @type detector\n     * @default a Matter.Detector instance\n     */\n\n    /**\n     * A `Matter.Grid` instance.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property grid\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * Replaced by and now alias for `engine.grid`.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\n     *\n     * @property world\n     * @type composite\n     * @default a Matter.Composite instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * The gravity to apply on all bodies in `engine.world`.\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravity x component.\n     *\n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravity y component.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The gravity scale factor.\n     *\n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n})();\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = __webpack_require__(3);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    Resolver._restingThresh = 4;\n    Resolver._restingThreshTangent = 6;\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount,\n            pairsLength = pairs.length;\n\n        // find total contacts on each body\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solvePosition = function(pairs, timeScale) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            contactShare,\n            positionImpulse,\n            positionDampen = Resolver._positionDampen,\n            pairsLength = pairs.length;\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            pair.separation = \n                normal.x * (bodyB.positionImpulse.x + collision.penetration.x - bodyA.positionImpulse.x)\n                + normal.y * (bodyB.positionImpulse.y + collision.penetration.y - bodyA.positionImpulse.y);\n        }\n        \n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = (pair.separation - pair.slop) * timeScale;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        var positionWarming = Resolver._positionWarming,\n            bodiesLength = bodies.length,\n            verticesTranslate = Vertices.translate,\n            boundsUpdate = Bounds.update;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i],\n                positionImpulse = body.positionImpulse,\n                positionImpulseX = positionImpulse.x,\n                positionImpulseY = positionImpulse.y,\n                velocity = body.velocity;\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (positionImpulseX !== 0 || positionImpulseY !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    verticesTranslate(part.vertices, positionImpulse);\n                    boundsUpdate(part.bounds, part.vertices, velocity);\n                    part.position.x += positionImpulseX;\n                    part.position.y += positionImpulseY;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += positionImpulseX;\n                body.positionPrev.y += positionImpulseY;\n\n                if (positionImpulseX * velocity.x + positionImpulseY * velocity.y < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    positionImpulse.x = 0;\n                    positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    positionImpulse.x *= positionWarming;\n                    positionImpulse.y *= positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var pairsLength = pairs.length,\n            i,\n            j;\n        \n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var contacts = pair.activeContacts,\n                contactsLength = contacts.length,\n                collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent;\n    \n            // resolve each contact\n            for (j = 0; j < contactsLength; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    normalImpulse = contact.normalImpulse,\n                    tangentImpulse = contact.tangentImpulse;\n    \n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    var impulseX = normal.x * normalImpulse + tangent.x * tangentImpulse,\n                        impulseY = normal.y * normalImpulse + tangent.y * tangentImpulse;\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                        bodyA.anglePrev += bodyA.inverseInertia * (\n                            (contactVertex.x - bodyA.position.x) * impulseY\n                            - (contactVertex.y - bodyA.position.y) * impulseX\n                        );\n                    }\n    \n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                        bodyB.anglePrev -= bodyB.inverseInertia * (\n                            (contactVertex.x - bodyB.position.x) * impulseY \n                            - (contactVertex.y - bodyB.position.y) * impulseX\n                        );\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} timeScale\n     */\n    Resolver.solveVelocity = function(pairs, timeScale) {\n        var timeScaleSquared = timeScale * timeScale,\n            restingThresh = Resolver._restingThresh * timeScaleSquared,\n            frictionNormalMultiplier = Resolver._frictionNormalMultiplier,\n            restingThreshTangent = Resolver._restingThreshTangent * timeScaleSquared,\n            NumberMaxValue = Number.MAX_VALUE,\n            pairsLength = pairs.length,\n            tangentImpulse,\n            maxFriction,\n            i,\n            j;\n\n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                bodyAVelocity = bodyA.velocity,\n                bodyBVelocity = bodyB.velocity,\n                normalX = collision.normal.x,\n                normalY = collision.normal.y,\n                tangentX = collision.tangent.x,\n                tangentY = collision.tangent.y,\n                contacts = pair.activeContacts,\n                contactsLength = contacts.length,\n                contactShare = 1 / contactsLength,\n                inverseMassTotal = bodyA.inverseMass + bodyB.inverseMass,\n                friction = pair.friction * pair.frictionStatic * frictionNormalMultiplier * timeScaleSquared;\n\n            // update body velocities\n            bodyAVelocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyAVelocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyBVelocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyBVelocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (j = 0; j < contactsLength; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex;\n\n                var offsetAX = contactVertex.x - bodyA.position.x,\n                    offsetAY = contactVertex.y - bodyA.position.y,\n                    offsetBX = contactVertex.x - bodyB.position.x,\n                    offsetBY = contactVertex.y - bodyB.position.y;\n \n                var velocityPointAX = bodyAVelocity.x - offsetAY * bodyA.angularVelocity,\n                    velocityPointAY = bodyAVelocity.y + offsetAX * bodyA.angularVelocity,\n                    velocityPointBX = bodyBVelocity.x - offsetBY * bodyB.angularVelocity,\n                    velocityPointBY = bodyBVelocity.y + offsetBX * bodyB.angularVelocity;\n\n                var relativeVelocityX = velocityPointAX - velocityPointBX,\n                    relativeVelocityY = velocityPointAY - velocityPointBY;\n\n                var normalVelocity = normalX * relativeVelocityX + normalY * relativeVelocityY,\n                    tangentVelocity = tangentX * relativeVelocityX + tangentY * relativeVelocityY;\n\n                // coulomb friction\n                var normalOverlap = pair.separation + normalVelocity;\n                var normalForce = Math.min(normalOverlap, 1);\n                normalForce = normalOverlap < 0 ? 0 : normalForce;\n                \n                var frictionLimit = normalForce * friction;\n\n                if (tangentVelocity > frictionLimit || -tangentVelocity > frictionLimit) {\n                    maxFriction = tangentVelocity > 0 ? tangentVelocity : -tangentVelocity;\n                    tangentImpulse = pair.friction * (tangentVelocity > 0 ? 1 : -1) * timeScaleSquared;\n                    \n                    if (tangentImpulse < -maxFriction) {\n                        tangentImpulse = -maxFriction;\n                    } else if (tangentImpulse > maxFriction) {\n                        tangentImpulse = maxFriction;\n                    }\n                } else {\n                    tangentImpulse = tangentVelocity;\n                    maxFriction = NumberMaxValue;\n                }\n\n                // account for mass, inertia and contact offset\n                var oAcN = offsetAX * normalY - offsetAY * normalX,\n                    oBcN = offsetBX * normalY - offsetBY * normalX,\n                    share = contactShare / (inverseMassTotal + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity * share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity * normalVelocity > restingThresh && normalVelocity < 0) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse += normalImpulse;\n                    contact.normalImpulse = Math.min(contact.normalImpulse, 0);\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity * tangentVelocity > restingThreshTangent) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse += tangentImpulse;\n                    if (contact.tangentImpulse < -maxFriction) contact.tangentImpulse = -maxFriction;\n                    if (contact.tangentImpulse > maxFriction) contact.tangentImpulse = maxFriction;\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                var impulseX = normalX * normalImpulse + tangentX * tangentImpulse,\n                    impulseY = normalY * normalImpulse + tangentY * tangentImpulse;\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                    bodyA.anglePrev += (offsetAX * impulseY - offsetAY * impulseX) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                    bodyB.anglePrev -= (offsetBX * impulseY - offsetBY * impulseX) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsListLength = pairsList.length,\n            pairsTable = pairs.table,\n            collisionsLength = collisions.length,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            collision,\n            pairIndex,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < pairsListLength; i++) {\n            pairsList[i].confirmedActive = false;\n        }\n\n        for (i = 0; i < collisionsLength; i++) {\n            collision = collisions[i];\n            pair = collision.pair;\n\n            if (pair) {\n                // pair already exists (but may or may not be active)\n                if (pair.isActive) {\n                    // pair exists and is active\n                    collisionActive.push(pair);\n                } else {\n                    // pair exists but was inactive, so a collision has just started again\n                    collisionStart.push(pair);\n                }\n\n                // update the pair\n                Pair.update(pair, collision, timestamp);\n                pair.confirmedActive = true;\n            } else {\n                // pair did not exist, create a new pair\n                pair = Pair.create(collision, timestamp);\n                pairsTable[pair.id] = pair;\n\n                // push the new pair\n                collisionStart.push(pair);\n                pairsList.push(pair);\n            }\n        }\n\n        // find pairs that are no longer active\n        var removePairIndex = [];\n        pairsListLength = pairsList.length;\n\n        for (i = 0; i < pairsListLength; i++) {\n            pair = pairsList[i];\n            \n            if (!pair.confirmedActive) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n\n                if (!pair.collision.bodyA.isSleeping && !pair.collision.bodyB.isSleeping) {\n                    removePairIndex.push(i);\n                }\n            }\n        }\n\n        // remove inactive pairs\n        for (i = 0; i < removePairIndex.length; i++) {\n            pairIndex = removePairIndex[i] - i;\n            pair = pairsList[pairIndex];\n            pairsList.splice(pairIndex, 1);\n            delete pairsTable[pair.id];\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Matter = module.exports = __webpack_require__(22);\r\n\r\nMatter.Axes = __webpack_require__(11);\r\nMatter.Bodies = __webpack_require__(12);\r\nMatter.Body = __webpack_require__(6);\r\nMatter.Bounds = __webpack_require__(1);\r\nMatter.Collision = __webpack_require__(8);\r\nMatter.Common = __webpack_require__(0);\r\nMatter.Composite = __webpack_require__(5);\r\nMatter.Composites = __webpack_require__(23);\r\nMatter.Constraint = __webpack_require__(10);\r\nMatter.Contact = __webpack_require__(17);\r\nMatter.Detector = __webpack_require__(14);\r\nMatter.Engine = __webpack_require__(18);\r\nMatter.Events = __webpack_require__(4);\r\nMatter.Grid = __webpack_require__(24);\r\nMatter.Mouse = __webpack_require__(13);\r\nMatter.MouseConstraint = __webpack_require__(25);\r\nMatter.Pair = __webpack_require__(9);\r\nMatter.Pairs = __webpack_require__(20);\r\nMatter.Plugin = __webpack_require__(15);\r\nMatter.Query = __webpack_require__(26);\r\nMatter.Render = __webpack_require__(16);\r\nMatter.Resolver = __webpack_require__(19);\r\nMatter.Runner = __webpack_require__(27);\r\nMatter.SAT = __webpack_require__(28);\r\nMatter.Sleeping = __webpack_require__(7);\r\nMatter.Svg = __webpack_require__(29);\r\nMatter.Vector = __webpack_require__(2);\r\nMatter.Vertices = __webpack_require__(3);\r\nMatter.World = __webpack_require__(30);\r\n\r\n// temporary back compatibility\r\nMatter.Engine.run = Matter.Runner.run;\r\nMatter.Common.deprecated(Matter.Engine, 'run', 'Engine.run ➤ use Matter.Runner.run(engine) instead');\r\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/\r\n\r\nvar Matter = {};\r\n\r\nmodule.exports = Matter;\r\n\r\nvar Plugin = __webpack_require__(15);\r\nvar Common = __webpack_require__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * The library name.\r\n     * @property name\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.name = 'matter-js';\r\n\r\n    /**\r\n     * The library version.\r\n     * @property version\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.version =  true ? \"0.18.0\" : undefined;\r\n\r\n    /**\r\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n     * @property uses\r\n     * @type {Array}\r\n     */\r\n    Matter.uses = [];\r\n\r\n    /**\r\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n     * @property used\r\n     * @readOnly\r\n     * @type {Array}\r\n     */\r\n    Matter.used = [];\r\n\r\n    /**\r\n     * Installs the given plugins on the `Matter` namespace.\r\n     * This is a short-hand for `Plugin.use`, see it for more information.\r\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n     */\r\n    Matter.use = function() {\r\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method before\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.before = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathBefore(Matter, path, func);\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method after\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.after = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathAfter(Matter, path, func);\r\n    };\r\n\r\n})();\r\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = __webpack_require__(5);\nvar Constraint = __webpack_require__(10);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(6);\nvar Bodies = __webpack_require__(12);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to newtonsCradle example\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                    { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n\n    deprecated(Composites, 'newtonsCradle', 'Composites.newtonsCradle ➤ moved to newtonsCradle example');\n    \n    /**\n     * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to car example\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    deprecated(Composites, 'car', 'Composites.car ➤ moved to car example');\n\n    /**\n     * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\n     * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\n     * @deprecated moved to softBody and cloth examples\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n    deprecated(Composites, 'softBody', 'Composites.softBody ➤ moved to softBody and cloth examples');\n})();\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Detector`.\n*\n* All usage should be migrated to `Matter.Detector` or another alternative.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n* @deprecated\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @deprecated replaced by Matter.Detector\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // temporary back compatibility bounds check\n            if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y))\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    deprecated(Grid, 'update', 'Grid.update ➤ replaced by Matter.Detector');\n\n    /**\n     * Clears the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    deprecated(Grid, 'clear', 'Grid.clear ➤ replaced by Matter.Detector');\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            bucketLength = bucket.length,\n            i;\n\n        // add new pairs\n        for (i = 0; i < bucketLength; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var id = pairId(body, bodyB),\n                pair = gridPairs[id];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                gridPairs[id] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            i;\n\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        var bucketLength = bucket.length;\n\n        // update pair counts\n        for (i = 0; i < bucketLength; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var pair = gridPairs[pairId(body, bucket[i])];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pair,\n            gridPairs = grid.pairs,\n            pairKeys = Common.keys(gridPairs),\n            pairKeysLength = pairKeys.length,\n            pairs = [],\n            k;\n\n        // iterate over grid.pairs\n        for (k = 0; k < pairKeysLength; k++) {\n            pair = gridPairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete gridPairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = __webpack_require__(3);\nvar Sleeping = __webpack_require__(7);\nvar Mouse = __webpack_require__(13);\nvar Events = __webpack_require__(4);\nvar Detector = __webpack_require__(14);\nvar Constraint = __webpack_require__(10);\nvar Composite = __webpack_require__(5);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = __webpack_require__(2);\nvar Collision = __webpack_require__(8);\nvar Bounds = __webpack_require__(1);\nvar Bodies = __webpack_require__(12);\nvar Vertices = __webpack_require__(3);\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {collision[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [],\n            bodiesLength = bodies.length,\n            bounds = body.bounds,\n            collides = Collision.collides,\n            overlaps = Bounds.overlaps;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                partsALength = bodyA.parts.length,\n                partsAStart = partsALength === 1 ? 0 : 1;\n            \n            if (overlaps(bodyA.bounds, bounds)) {\n                for (var j = partsAStart; j < partsALength; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (overlaps(part.bounds, bounds)) {\n                        var collision = collides(part, body);\n\n                        if (collision) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {collision[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = __webpack_require__(4);\nvar Engine = __webpack_require__(18);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            correction: 1,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            timeScalePrev: 1,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function render(time){\n            runner.frameRequestId = _requestAnimationFrame(render);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            correction = 1,\n            delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n            \n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // correction for delta\n            correction = delta / runner.delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // time correction for time scaling\n        if (runner.timeScalePrev !== 0)\n            correction *= timing.timeScale / runner.timeScalePrev;\n\n        if (timing.timeScale === 0)\n            correction = 0;\n\n        runner.timeScalePrev = timing.timeScale;\n        runner.correction = correction;\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n        Engine.update(engine, delta, correction);\n        Events.trigger(runner, 'afterUpdate', event);\n\n        Events.trigger(runner, 'afterTick', event);\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Collision`.\n*\n* All usage should be migrated to `Matter.Collision`.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n* @deprecated\n*/\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Collision = __webpack_require__(8);\nvar Common = __webpack_require__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @deprecated replaced by Collision.collides\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB) {\n        return Collision.collides(bodyA, bodyB);\n    };\n\n    deprecated(SAT, 'collides', 'SAT.collides ➤ replaced by Collision.collides');\n\n})();\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = __webpack_require__(1);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Composite`.\n*\n* All usage should be migrated to the equivalent functions found on `Matter.Composite`.\n* For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\n*\n* The property `world.gravity` has been moved to `engine.gravity`.\n*\n* For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\n* Eventually this alias module will be marked as deprecated and then later removed in a future release.\n*\n* @class World\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = __webpack_require__(5);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * See above, aliases for back compatibility only\n     */\n    World.create = Composite.create;\n    World.add = Composite.add;\n    World.remove = Composite.remove;\n    World.clear = Composite.clear;\n    World.addComposite = Composite.addComposite;\n    World.addBody = Composite.addBody;\n    World.addConstraint = Composite.addConstraint;\n\n})();\n\n\n/***/ })\n/******/ ]);\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/matter-js/build/matter.js\n// module id = 6wRV\n// module chunks = 2","<template>\r\n\t<canvas id=\"myCanvas\"></canvas>\r\n</template>\r\n\r\n<script>\r\nimport { Bodies, Composite, Body, Sleeping } from 'matter-js';\r\nimport Static from './Static';\r\nimport Basic from './Basic';\r\nimport Events from './Events';\r\nexport default {\r\n\tname: 'Matter',\r\n\tdata() {\r\n\t\treturn {\r\n\t\t\tmoveCircle: null,\r\n\t\t\tconfig: [\r\n\t\t\t\t{\r\n\t\t\t\t\tradius: 20,\r\n\t\t\t\t\tsprite: '/static/images/Mercury.png',\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tradius: 26,\r\n\t\t\t\t\tsprite: '/static/images/Mars.png',\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tradius: 33,\r\n\t\t\t\t\tsprite: '/static/images/Venus.png',\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tradius: 43,\r\n\t\t\t\t\tsprite: '/static/images/theEarth.png',\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tradius: 56,\r\n\t\t\t\t\tsprite: '/static/images/Neptune.png',\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tradius: 73,\r\n\t\t\t\t\tsprite: '/static/images/Uranus.png',\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tradius: 95,\r\n\t\t\t\t\tsprite: '/static/images/Saturn.png',\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tradius: 124,\r\n\t\t\t\t\tsprite: '/static/images/Jupiter.png',\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t\tcircleTargetArr: [],\r\n\t\t\tlevel: 0,\r\n\t\t};\r\n\t},\r\n\tmethods: {\r\n\t\tgetRadius() {\r\n\t\t\tconst radius = [10, 15, 22.5, 33.75];\r\n\t\t\tconst max = this.level > 4 ? 4 : this.level;\r\n\t\t\treturn radius[Math.floor(Math.random() * max)];\r\n\t\t},\r\n\t\tgetColor(radius) {\r\n\t\t\treturn radius === 10 ? '#FF0000' : this.config[radius].color;\r\n\t\t},\r\n\t\tsetLevel() {\r\n\t\t\tif (this.circleTargetArr.length < 2) return (this.level = 1);\r\n\t\t\tconst max = this.circleTargetArr.reduce(function (a, b) {\r\n\t\t\t\treturn a.custom.radius > b.custom.radius ? a : b;\r\n\t\t\t});\r\n\t\t\tthis.level = this.config[max.custom.radius].level;\r\n\t\t},\r\n\t\t// 添加球体\r\n\t\taddCircle() {\r\n\t\t\tconst dataTemp = this.config.slice(0, 4);\r\n\t\t\tconst index =\r\n\t\t\t\tthis.level === 0 ? 0 : (Math.random() * dataTemp.length) | 0;\r\n\t\t\tconst { radius, sprite } = dataTemp[index];\r\n\t\t\tthis.circle = Bodies.circle(750 / 2, radius + 30, radius, {\r\n\t\t\t\tisStatic: true,\r\n\t\t\t\trestitution: 0.2,\r\n\t\t\t\trender: {\r\n\t\t\t\t\tsprite: {\r\n\t\t\t\t\t\ttexture: sprite,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t});\r\n\t\t\tComposite.add(this.Basic.world, this.circle);\r\n\t\t\tthis.level++;\r\n\t\t},\r\n\t\tcreateMoveCircle({ x, y }) {\r\n\t\t\tconst circle = Bodies.circle(x, y, 10, {\r\n\t\t\t\tisStatic: true,\r\n\t\t\t\trender: { fillStyle: '#FF0000' },\r\n\t\t\t});\r\n\t\t\tcircle.custom = {};\r\n\t\t\tcircle.custom.radius = 10;\r\n\t\t\tcircle.custom.color = '#FF0000';\r\n\t\t\tComposite.add(this.Basic.world, circle);\r\n\t\t\treturn circle;\r\n\t\t},\r\n\t\tcreateCircle() {\r\n\t\t\tconst {\r\n\t\t\t\tposition: { x, y },\r\n\t\t\t\tcustom: { radius, color },\r\n\t\t\t} = this.moveCircle;\r\n\t\t\tconst circle = Bodies.circle(x, y, radius, {\r\n\t\t\t\trender: { fillStyle: color },\r\n\t\t\t});\r\n\t\t\tcircle.custom = {};\r\n\t\t\tcircle.custom.radius = radius;\r\n\t\t\tComposite.add(this.Basic.world, circle);\r\n\t\t\treturn circle;\r\n\t\t},\r\n\t},\r\n\tmounted() {\r\n\t\tconst canvas = document.getElementById('myCanvas');\r\n\t\tthis.Basic = new Basic(canvas);\r\n\t\tthis.Static = new Static(this.Basic.world);\r\n\t\tthis.Events = new Events(this.Basic.mouseConstraint, this.Basic.engine);\r\n\t\tcanvas.style.backgroundImage = 'url(/static/images/bg.jpeg)';\r\n\t\tthis.addCircle();\r\n\t\tthis.Events.updateCirclePosition = (e) => {\r\n\t\t\tif (!this.circle) return;\r\n\t\t\tconst xTemp = (e.mouse.position.x * 750) / window.innerWidth;\r\n\t\t\tconst radius = this.circle.circleRadius;\r\n\t\t\tBody.setPosition(this.circle, {\r\n\t\t\t\tx: e.mouse.position.x,\r\n\t\t\t\ty: radius + 30,\r\n\t\t\t});\r\n\t\t};\r\n\t\tthis.Events.activationCircle = () => {\r\n\t\t\tif (!this.circle) return;\r\n\t\t\tSleeping.set(this.circle, false);\r\n\t\t\tBody.setStatic(this.circle, false);\r\n\t\t\tthis.circle = null;\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.addCircle();\r\n\t\t\t}, 1000);\r\n\t\t};\r\n\t\tthis.Events.collision = (bodyA, bodyB) => {\r\n\t\t\tconst {\r\n\t\t\t\tposition: { x: bx, y: by },\r\n\t\t\t\tcircleRadius,\r\n\t\t\t} = bodyA;\r\n\t\t\tconst {\r\n\t\t\t\tposition: { x: ax, y: ay },\r\n\t\t\t} = bodyB;\r\n\r\n\t\t\tconst x = (ax + bx) / 2;\r\n\t\t\tconst y = (ay + by) / 2;\r\n\r\n\t\t\tconst index = this.config.findIndex(\r\n\t\t\t\t(d) => d.radius === circleRadius\r\n\t\t\t);\r\n\t\t\tconst { radius, sprite } = this.config[index + 1];\r\n\r\n\t\t\tconst circleNew = Bodies.circle(x, y, radius, {\r\n\t\t\t\trestitution: 0.2,\r\n\t\t\t\trender: {\r\n\t\t\t\t\tsprite: {\r\n\t\t\t\t\t\ttexture: sprite,\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t});\r\n\r\n\t\t\tComposite.remove(this.Basic.world, [bodyA, bodyB]);\r\n\t\t\tComposite.add(this.Basic.world, circleNew);\r\n\t\t};\r\n\t},\r\n};\r\n</script>\r\n\r\n<style scoped >\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/pages/Matter/index.vue","\nimport {\n  Engine,\n  Render,\n  Runner,\n  MouseConstraint,\n  Mouse,\n  Composite,\n} from 'matter-js';\nexport default class Basic {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.initScenes()\n    this.setControls()\n  }\n\n  /**\n   * 初始化场景\n   */\n  initScenes() {\n    // 创建引擎\n    this.engine = Engine.create({\n      enableSleeping: true\n    });\n    // 创建世界\n    this.world = this.engine.world;\n    this.world.bounds = { min: { x: 0, y: 0}, max: { x: 750, y: window.innerHeight * 750 / window.innerWidth } };\n    // 创建渲染器\n    this.render = Render.create({\n      canvas: this.canvas,\n      engine: this.engine,\n      options: {\n        width: 750,\n        height: window.innerHeight * 750 / window.innerWidth,\n        wireframes: false,\n        showSleeping:false\n      },\n    });\n    // 在requestAnimationFrame事件上持续渲染画布\n    Render.run(this.render);\n    // 创建动画循环\n    this.runner = Runner.create();\n    // 在requestAnimationFrame事件上连续记录引擎\n    Runner.run(this.runner, this.engine);\n  }\n\n  /**\n   * 设置控制器\n   */\n  setControls() {\n    this.mouse = Mouse.create(this.render.canvas);\n    this.mouseConstraint = MouseConstraint.create(this.engine, {\n      mouse: this.mouse,\n    })\n    return;\n    // 创建一个鼠标模块\n    this.mouse = Mouse.create(this.render.canvas);\n    // 创建鼠标模块约束方法\n    this.mouseConstraint = MouseConstraint.create(this.engine, {\n      mouse: this.mouse,\n      constraint: {\n        stiffness: 0.2,\n        render: {\n          visible: false,\n        },\n      },\n    });\n    // 添加组合\n    Composite.add(this.world, this.mouseConstraint);\n    // 使鼠标与渲染保持同步\n    this.render.mouse = this.mouse;\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/Matter/Basic.js","\nimport {\n  Bodies,\n  Body,\n  Composite,\n} from 'matter-js';\nexport default class Static {\n  constructor(world) {\n    this.world = world;\n    this.canvasHeight = window.innerHeight * 750 / window.innerWidth;\n    this.init();\n  }\n  init() {\n    let rect1 = Bodies.rectangle(750 / 2, this.canvasHeight - 30 / 2, 750, 30, {\n    });\n    let rect2 = Bodies.rectangle(-10 / 2, this.canvasHeight / 2, 10, this.canvasHeight, {\n    });\n    let rect3 = Bodies.rectangle(10 / 2 + 750, this.canvasHeight / 2, 10, this.canvasHeight, {\n    });\n    let c1 = Body.create({\n      isStatic: true,\n      parts: [rect1, rect2, rect3],\n      render: {\n        fillStyle: '#F55A3C'\n      }\n    });\n    Composite.add(this.world, c1);\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/Matter/Static.js","\nimport { Events,Sleeping } from 'matter-js';\nexport default class Basic {\n  constructor(mouseConstraint, engine) {\n    this.mouseConstraint = mouseConstraint;\n    this.engine = engine;\n    this.isDown = false;\n    this.watchDownEvent();\n    this.watchCollision();\n  }\n  prohibitDown() {\n    this.isDown = true;\n    let startTime = new Date().getTime();\n    let inter = setInterval(() => {\n      let endTime = new Date().getTime();\n      if (endTime - startTime >= 1000) {\n        this.isDown = false;\n        clearInterval(inter);\n      }\n    });\n  }\n  watchDownEvent() {\n    Events.on(this.mouseConstraint, 'mouseup', (val) => {\n      this.updateCirclePosition(val);\n      this.activationCircle();\n    });\n    Events.on(this.mouseConstraint, 'mousemove', (val) => {\n      this.updateCirclePosition(val);\n    });\n  };\n  updateCirclePosition() { };\n  activationCircle() { };\n\n  watchCollision() {\n    Events.on(this.engine, 'collisionStart', (e) => {\n      const { pairs } = e;\n      Sleeping.afterCollisions(pairs);\n      for (let i = 0; i < pairs.length; i++) {\n        const { bodyA, bodyB } = pairs[i];\n        if (bodyA.circleRadius && bodyA.circleRadius == bodyB.circleRadius) {\n          this.collision(bodyA,bodyB);\n         \n        }\n      }\n\n\n      // var pairs = event.pairs;\n      // for (var i = 0; i < pairs.length; i++) {\n      //   var pair = pairs[i];\n\n      //   // 检查碰撞的两个刚体是否为圆形刚体\n      //   if (pair.bodyA.label === 'Circle Body' && pair.bodyB.label === 'Circle Body') {\n      //     if (pair.bodyA.custom.radius !== pair.bodyB.custom.radius) continue;\n      //     if (pair.bodyA.custom.type === 'collision' || pair.bodyB.custom.type === 'collision') continue;\n      //     pair.bodyA.custom.type = 'collision';\n      //     pair.bodyB.custom.type = 'collision';\n      //     // console.log('两个圆形刚体发生碰撞！', pair.bodyA, pair.bodyB);\n      //     this.collision(pair.bodyA, pair.bodyB);\n      //   }\n      // }\n    });\n  }\n  collision() { };\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/Matter/Events.js","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('canvas',{attrs:{\"id\":\"myCanvas\"}})}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-2f0163ee\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/pages/Matter/index.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-2f0163ee\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./index.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-2f0163ee\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./index.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-2f0163ee\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/Matter/index.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}